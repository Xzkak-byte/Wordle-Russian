import os
from aiogram import F,Router
from aiogram.types import CallbackQuery,Message
from dotenv import load_dotenv
import app.database.requests as rq
from aiogram.fsm.context import FSMContext
import app.states as st
import app.keyboards as kb
from app.utils import generate
load_dotenv()
router = Router()
CEO = list(map(int, os.getenv("CEO", "").split(",")))

@router.callback_query(F.data == "settings")
async def settings1(callback : CallbackQuery,state : FSMContext):
    await callback.answer()
    if await state.get_state() != None:
        await callback.message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π ‚ùå")
        return
    if await rq.is_infinity(callback.from_user.id):
        await callback.message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –∂–∏–∑–Ω–µ–π, –∂–µ–ª–∞–µ—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –µ–µ ?",reply_markup=kb.settings_if_6) 
    else:
        await callback.message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å 6 –∂–∏–∑–Ω–µ–π,–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å, –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å ?",reply_markup=kb.settings_if_inf)

@router.callback_query(F.data == "start_play")
async def start_play(callback : CallbackQuery,state : FSMContext):
    await callback.answer()
    id = callback.from_user.id
    if await state.get_state() != None:
        await callback.message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π ‚ùå")
        return
    await state.set_state(st.Game)
    msg = await callback.message.answer("–ñ–¥–µ–º —á—Ç–æ–±—ã AI —Å–¥–µ–ª–∞–ª —Å–ª–æ–≤–æ... ü§ñ")
    word = await generate()
    await state.set_data(word=word,lifes=6)
    await msg.edit_text("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å ! üé∞\n–ú–æ–∂–µ—Ç–µ —Å–∫–∏–¥—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞ !",reply_markup=kb.out_game)

@router.callback_query(F.data == "nothing")
async def nothing(callback : CallbackQuery,state : FSMContext):
    await callback.answer()
    await callback.message.delete()
    await state.clear()

@router.callback_query(F.data == "turn_on_inf")
async def turn_on_inf(callback : CallbackQuery,state : FSMContext):
    await callback.answer()
    if await state.get_state() != None:
        await callback.message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π ‚ùå")
        return
    await rq.change_inf(callback.from_user.id, True)
    await callback.message.delete()
    await callback.message.answer("–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∂–∏–∑–Ω–∏ ! ‚ôæÔ∏è",reply_markup=kb.base_inline)

@router.callback_query(F.data == "turn_off_inf")
async def turn_off_inf(callback : CallbackQuery,state : FSMContext):
    await callback.answer()
    if await state.get_state() != None:
        await callback.message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π ‚ùå")
        return
    await rq.change_inf(callback.from_user.id, False)
    await callback.message.delete()
    await callback.message.answer("–¢–µ–ø–µ—Ä—å —É –≤–∞—Å 6 –∂–∏–∑–Ω–µ–π !",reply_markup=kb.base_inline)

@router.callback_query(F.data == "quit")
async def quit(callback : CallbackQuery,state : FSMContext):
    await callback.answer()
    id = callback.from_user.id
    if await state.get_state() != "Game":
        await callback.message.reply("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ ‚ùå")
        return
    word = (await state.get_data())["word"]
    await callback.message.answer(f"–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, —Ä–∞–Ω–µ–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ -> {word}",reply_markup=kb.base_inline)
    await state.clear()

@router.callback_query(F.data == "rules")
async def rules(callback: CallbackQuery,state : FSMContext):
    await callback.answer()
    if await state.get_state() != None:
        await callback.message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π ‚ùå")
        return
    await callback.message.answer(
        "<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ Wordle:</b>\n"
        "–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ò–≥—Ä–∞—Ç—å üïπ¬ª, –±–æ—Ç –≤—ã–±–µ—Ä–µ—Ç –æ–¥–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ, —Å–æ—Å—Ç–æ—è—â–µ–µ –∏–∑ 5 –±—É–∫–≤. "
        "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî —É–≥–∞–¥–∞—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ.\n\n"
        "–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ 5 –±—É–∫–≤. –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç, –∫–∞–∫–∏–µ –±—É–∫–≤—ã –ø–æ–¥—Ö–æ–¥—è—Ç:\n"
        "üü• ‚Äî —Ç–∞–∫–æ–π –±—É–∫–≤—ã –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ.\n"
        "üü® ‚Äî –±—É–∫–≤–∞ –µ—Å—Ç—å, –Ω–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ.\n"
        "üü© ‚Äî –±—É–∫–≤–∞ –∏ –µ—ë –ø–æ–∑–∏—Ü–∏—è –≤–µ—Ä–Ω—ã.\n\n"
        "–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—ã –Ω–∞–π–¥—ë—Ç–µ –≤—Å–µ 5 –±—É–∫–≤.\n"
        "–£–¥–∞—á–∏, –∏–≥—Ä–æ–∫–∏! üçÄ",
        parse_mode="HTML",reply_markup=kb.play
    )

@router.message(st.Edit_name.name)
async def edit_name(message : Message, state : FSMContext):
    text = message.text
    if len(text) > 10:
        await message.reply("–í–∞—à –Ω–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–≤—ã—à–∞—Ç—å 10 –±—É–∫–≤ ‚õîÔ∏è")
        return
    if text.lower() in ["wordle ceo", "ceo wordle"]:
        if await rq.is_admin(message.from_user.id):
            await rq.change_name(message.from_user.id,text)
            await state.clear()
            await message.reply(f"–í–∞—à –Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω ‚úÖ\n–í–∞—à –Ω–æ–≤—ã–π –Ω–∏–∫ : <b>{text}</b>\n–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ üë§",parse_mode="HTML")
        else: await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∏–º—è —Å–æ–∑–¥–∞—Ç–µ–ª—è ‚ùå")
        return
    await rq.change_name(message.from_user.id,text)
    await state.clear()
    await message.reply(f"–í–∞—à –Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω ‚úÖ\n–í–∞—à –Ω–æ–≤—ã–π –Ω–∏–∫ : <b>{text}</b>",parse_mode="HTML")

@router.message(st.Mess_to_admin.msg)
async def wait_message_admin(message : Message,state : FSMContext):
    data = await state.get_data();
    msg = f"<b>–í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üí¨</b>\n\n<i>{message.text}</i>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data['id']}"
    for ceo in CEO: await message.bot.send_message(ceo,msg,parse_mode="HTML")
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚úÖ")
    await state.clear()