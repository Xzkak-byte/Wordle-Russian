import os
from aiogram import F,Router
from aiogram.filters import Command
from aiogram.types import Message,CallbackQuery
import app.keyboards as kb
from dotenv import load_dotenv
import app.database.requests as rq
from aiogram.fsm.context import FSMContext
import app.states as st
load_dotenv()
router = Router()
CEO = list(map(int, os.getenv("CEO", "").split(",")))

@router.message(Command("admin"))
async def admin_command(message: Message,state : FSMContext):
    if await state.get_state() != None:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π ‚ùå")
        return
    if message.from_user.id in CEO: await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ —É–≤–∞–∂–∞–µ–º—ã–π —Å–æ–∑–¥–∞—Ç–µ–ª—å, —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å ?", reply_markup=kb.ceo_panel)
    elif await rq.is_admin(message.from_user.id): await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –¥–æ—Ä–æ–≥–æ–π –∞–¥–º–∏–Ω, —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å ?", reply_markup=kb.admin_panel)
    else: await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã ‚ùå")

@router.callback_query(F.data.endswith("_admin"))
async def set_admin(callback : CallbackQuery,state : FSMContext):
    await callback.answer()
    if await state.get_state() != None:
        await callback.message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π ‚ùå")
        return
    action = callback.data
    await state.update_data(action=action)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",reply_markup=kb.otmena)
    await state.set_state(st.CEOState.id)

@router.callback_query(F.data.startswith("admin_change_"))
async def admin_choose_action(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    action = callback.data
    await state.update_data(action=action)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(st.AdminStates.waiting_for_target_id)

@router.callback_query(F.data == "send_messages")
async def send_messages_call(callback : CallbackQuery,state : FSMContext):
    await callback.answer()
    await state.update_data(id=0)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üëá",reply_markup=kb.choice_message)
    await state.set_state(st.SendMessages.choice)

@router.message(st.SendMessages.choice,F.text == "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É üßç")
async def choice_man(message : Message,state : FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",reply_markup=kb.otmena)
    await state.set_state(st.SendMessages.id)

@router.message(st.SendMessages.id)
async def choice_man_msg(message : Message,state: FSMContext):
    try: id = int(message.text.strip())
    except Exception: 
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID",reply_markup=kb.otmena)
        return
    await state.update_data(id=id)
    await message.answer("–¢–µ–ø–µ—Ä—å —Å–∫–∏–Ω—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å üí¨",reply_markup=kb.otmena)
    await state.set_state(st.SendMessages.msg)

@router.message(st.SendMessages.choice)
async def choice_send_message(message : Message,state : FSMContext):
    if message.text == "–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º üë•": await state.update_data(choice=1)
    elif message.text == "–ì–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ üë®‚Äçüíª": await state.update_data(choice=3)
    elif message.text == "–í—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º üë§": await state.update_data(choice=4)
    else:
        await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ ‚ùå",reply_markup=kb.otmena)
        return
    await message.answer("–¢–µ–ø–µ—Ä—å —Å–∫–∏–Ω—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å üí¨",reply_markup=kb.otmena)
    await state.set_state(st.SendMessages.msg)

@router.message(st.SendMessages.msg)
async def send_messages(message : Message,state : FSMContext):
    data = await state.get_data()
    choice,id = data.get("choice"),data.get("id")

    if id: 
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚úÖ")
        await state.clear()
        await message.bot.copy_message(chat_id=id,from_chat_id=message.chat.id,message_id=message.message_id)
        return
    if choice == 1: users = await rq.get_all_users()
    elif choice == 3: users = CEO
    elif choice == 4: users = await rq.get_all_admins()

    for user in users:
        try: await message.bot.copy_message(chat_id=user,from_chat_id=message.chat.id,message_id=message.message_id)
        except Exception: pass

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ‚úÖ")
    await state.clear()

@router.message(st.AdminStates.waiting_for_target_id)
async def admin_get_id(message: Message, state: FSMContext):
    try:
        if message.text.strip().lower() == "–º–æ–π": target_id = message.from_user.id
        else : target_id = int(message.text.strip())
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º ‚ùå",reply_markup=kb.otmena)
        return
    await state.update_data(target_id=target_id)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    await state.set_state(st.AdminStates.waiting_for_value)

@router.message(st.AdminStates.waiting_for_value)
async def admin_get_value(message: Message, state: FSMContext):
    try:
        value = float(message.text.strip())
    except ValueError:
        await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º ‚ùå",reply_markup=kb.otmena)
        return

    data = await state.get_data()
    action = data["action"]
    target_id = data["target_id"]

    if action == "admin_change_score": await rq.change_score(target_id, value)
    elif action == "admin_change_inf_games": await rq.change_inf_games(target_id, value)
    elif action == "admin_change_simple_games": await rq.change_simple_games(target_id, value)

    await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã! ‚úÖ")
    await state.clear()

@router.message(st.CEOState.id)
async def get_id_ceo(message : Message,state : FSMContext):
    text = message.text
    try:
        if message.text.strip().lower() == "–º–æ–π": id = message.from_user.id
        else : id = int(message.text.strip())
    except Exception:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∞–≤–µ—Ä–Ω—ã–π ID ‚ùå",reply_markup=kb.otmena)
        return
    action = (await state.get_data())["action"]
    if id in CEO:
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ —Å –≤—ã—Å—à–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π ‚ùå",reply_markup=kb.otmena)
        return
    if action == "set_admin": await rq.change_admin(id, True)
    else:
        if not await rq.is_admin(id):
            await message.answer("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—å—Å—è –∞–¥–º–∏–Ω–æ–º ‚ùå",reply_markup=kb.otmena)
            return
        await rq.change_admin(id,False)
    await message.answer(f"–†–∞–±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ <b>{id}</b> —É—Å–ø–µ—à–Ω–æ {'–∑–∞–∫–æ–Ω—á–µ–Ω–∞' if action != 'set_admin' else '–Ω–∞—á–∞—Ç–∞'} ‚úÖ",parse_mode="HTML")
    if action == "set_admin": await message.bot.send_message(id,"<b>–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–∏–ª–∞ –≤–∞—Å –Ω–∞ –ø–æ—Å—Ç –∞–¥–º–∏–Ω–∞, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–æ—Ä–æ–≥–æ–π –∞–¥–º–∏–Ω üë§</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–∞—à–∏–º–∏ –ø—Ä–∏–≤–µ–ª–µ–≥–∏—è–º–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /admin",parse_mode="HTML")
    else: await message.bot.send_message(id,"–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–±—Ä–∞–ª–∞ –≤–∞—Å –∏–∑ –ø–æ—Å—Ç–∞ –∞–¥–º–∏–Ω–∞, —Ç–µ–ø–µ—Ä—å –∫–æ–º–∞–Ω–¥–∞ /admin –∏ –≤—Å–µ –µ–µ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ‚ùå")
